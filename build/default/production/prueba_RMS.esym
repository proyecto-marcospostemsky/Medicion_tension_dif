D G "__PCH__" 0 0 ""5.048""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""23-sep-16""
D G "__TIME__" 0 0 ""10:01:01""
D G "_UNICODE" 0 0 ""?""
D G "__18F4550" 0 0 "1" "Standard Header file for the PIC18F4550 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 45 ""
v L "value" 1 45 "int8" `54 
f B "set_tris_a" 1 45 "void(int8 value)" `53 
f N "set_tris_b" 1 46 ""
v L "value" 1 46 "int8" `56 
f B "set_tris_b" 1 46 "void(int8 value)" `55 
f N "set_tris_c" 1 47 ""
v L "value" 1 47 "int8" `58 
f B "set_tris_c" 1 47 "void(int8 value)" `57 
f N "set_tris_d" 1 48 ""
v L "value" 1 48 "int8" `60 
f B "set_tris_d" 1 48 "void(int8 value)" `59 
f N "set_tris_e" 1 49 ""
v L "value" 1 49 "int8" `62 
f B "set_tris_e" 1 49 "void(int8 value)" `61 
f N "get_tris_a" 1 50 ""
f B "get_tris_a" 1 50 "int8()" `63 
f N "get_tris_b" 1 51 ""
f B "get_tris_b" 1 51 "int8()" `64 
f N "get_tris_c" 1 52 ""
f B "get_tris_c" 1 52 "int8()" `65 
f N "get_tris_d" 1 53 ""
f B "get_tris_d" 1 53 "int8()" `66 
f N "get_tris_e" 1 54 ""
f B "get_tris_e" 1 54 "int8()" `67 
f N "output_a" 1 55 ""
v L "value" 1 55 "int8" `69 
f B "output_a" 1 55 "void(int8 value)" `68 
f N "output_b" 1 56 ""
v L "value" 1 56 "int8" `71 
f B "output_b" 1 56 "void(int8 value)" `70 
f N "output_c" 1 57 ""
v L "value" 1 57 "int8" `73 
f B "output_c" 1 57 "void(int8 value)" `72 
f N "output_d" 1 58 ""
v L "value" 1 58 "int8" `75 
f B "output_d" 1 58 "void(int8 value)" `74 
f N "output_e" 1 59 ""
v L "value" 1 59 "int8" `77 
f B "output_e" 1 59 "void(int8 value)" `76 
f N "input_a" 1 60 ""
f B "input_a" 1 60 "int8()" `78 
f N "input_b" 1 61 ""
f B "input_b" 1 61 "int8()" `79 
f N "input_c" 1 62 ""
f B "input_c" 1 62 "int8()" `80 
f N "input_d" 1 63 ""
f B "input_d" 1 63 "int8()" `81 
f N "input_e" 1 64 ""
f B "input_e" 1 64 "int8()" `82 
f N "input_change_a" 1 65 ""
f B "input_change_a" 1 65 "int8()" `83 
f N "input_change_b" 1 66 ""
f B "input_change_b" 1 66 "int8()" `84 
f N "input_change_c" 1 67 ""
f B "input_change_c" 1 67 "int8()" `85 
f N "input_change_d" 1 68 ""
f B "input_change_d" 1 68 "int8()" `86 
f N "input_change_e" 1 69 ""
f B "input_change_e" 1 69 "int8()" `87 
f N "port_b_pullups" 1 70 ""
v L "value" 1 70 "int8" `89 
f B "port_b_pullups" 1 70 "void(int8 value)" `88 
f N "input" 1 71 ""
v L "pin" 1 71 "int16" `91 
f B "input" 1 71 "int8(int16 pin)" `90 
f N "input_state" 1 72 ""
v L "pin" 1 72 "int16" `93 
f B "input_state" 1 72 "int8(int16 pin)" `92 
f N "output_low" 1 73 ""
v L "pin" 1 73 "int16" `95 
f B "output_low" 1 73 "void(int16 pin)" `94 
f N "output_high" 1 74 ""
v L "pin" 1 74 "int16" `97 
f B "output_high" 1 74 "void(int16 pin)" `96 
f N "output_toggle" 1 75 ""
v L "pin" 1 75 "int16" `99 
f B "output_toggle" 1 75 "void(int16 pin)" `98 
f N "output_bit" 1 76 ""
v L "pin" 1 76 "int16" `101 
v L "level" 1 76 "int8" `102 
f B "output_bit" 1 76 "void(int16 pin,int8 level)" `100 
f N "output_float" 1 77 ""
v L "pin" 1 77 "int16" `104 
f B "output_float" 1 77 "void(int16 pin)" `103 
f N "output_drive" 1 78 ""
v L "pin" 1 78 "int16" `106 
f B "output_drive" 1 78 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 82 "31744"
d G "PIN_A1" 1 83 "31745"
d G "PIN_A2" 1 84 "31746"
d G "PIN_A3" 1 85 "31747"
d G "PIN_A4" 1 86 "31748"
d G "PIN_A5" 1 87 "31749"
d G "PIN_A6" 1 88 "31750"
d G "PIN_B0" 1 90 "31752"
d G "PIN_B1" 1 91 "31753"
d G "PIN_B2" 1 92 "31754"
d G "PIN_B3" 1 93 "31755"
d G "PIN_B4" 1 94 "31756"
d G "PIN_B5" 1 95 "31757"
d G "PIN_B6" 1 96 "31758"
d G "PIN_B7" 1 97 "31759"
d G "PIN_C0" 1 99 "31760"
d G "PIN_C1" 1 100 "31761"
d G "PIN_C2" 1 101 "31762"
d G "PIN_C4" 1 102 "31764"
d G "PIN_C5" 1 103 "31765"
d G "PIN_C6" 1 104 "31766"
d G "PIN_C7" 1 105 "31767"
d G "PIN_D0" 1 107 "31768"
d G "PIN_D1" 1 108 "31769"
d G "PIN_D2" 1 109 "31770"
d G "PIN_D3" 1 110 "31771"
d G "PIN_D4" 1 111 "31772"
d G "PIN_D5" 1 112 "31773"
d G "PIN_D6" 1 113 "31774"
d G "PIN_D7" 1 114 "31775"
d G "PIN_E0" 1 116 "31776"
d G "PIN_E1" 1 117 "31777"
d G "PIN_E2" 1 118 "31778"
d G "PIN_E3" 1 119 "31779"
d G "PIN_E7" 1 120 "31783"
d G "FALSE" 1 123 "0"
d G "TRUE" 1 124 "1"
d G "BYTE" 1 126 "int8"
d G "BOOLEAN" 1 127 "int1"
d G "getc" 1 129 "getch"
d G "fgetc" 1 130 "getch"
d G "getchar" 1 131 "getch"
d G "putc" 1 132 "putchar"
d G "fputc" 1 133 "putchar"
d G "fgets" 1 134 "gets"
d G "fputs" 1 135 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 140 ""
f B "restart_cause" 1 140 "int8()" `107 
f N "reset_cpu" 1 141 ""
f B "reset_cpu" 1 141 "void()" `108 
f N "sleep" 1 142 ""
f B "sleep" 1 142 "void()" `109 
f N "sleep" 1 143 ""
v L "type" 1 143 "int8" `111 
f G "sleep" 1 143 "void(int8 type)" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 145 "7"
d G "MCLR_FROM_SLEEP" 1 146 "11"
d G "MCLR_FROM_RUN" 1 147 "15"
d G "NORMAL_POWER_UP" 1 148 "12"
d G "BROWNOUT_RESTART" 1 149 "14"
d G "WDT_FROM_SLEEP" 1 150 "3"
d G "RESET_INSTRUCTION" 1 151 "0"
d G "SLEEP_FULL" 1 154 "0" "Default"
d G "SLEEP_IDLE" 1 155 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 162 ""
v L "mode" 1 162 "int8" `113 
f B "setup_timer_0" 1 162 "void(int8 mode)" `112 
f N "set_timer0" 1 163 ""
v L "value" 1 163 "int16" `115 
f B "set_timer0" 1 163 "void(int16 value)" `114 
f N "get_timer0" 1 164 ""
f B "get_timer0" 1 164 "int16()" `116 
f N "setup_counters" 1 165 ""
v L "mode" 1 165 "int8" `118 
v L "prescaler" 1 165 "int8" `119 
f B "setup_counters" 1 165 "void(int8 mode,int8 prescaler)" `117 
f N "set_rtcc" 1 166 ""
v L "value" 1 166 "int16" `121 
f B "set_rtcc" 1 166 "void(int16 value)" `120 
f N "get_rtcc" 1 167 ""
f B "get_rtcc" 1 167 "int16()" `122  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 169 "0"
d G "T0_EXT_L_TO_H" 1 170 "32"
d G "T0_EXT_H_TO_L" 1 171 "48"
d G "T0_DIV_1" 1 173 "8"
d G "T0_DIV_2" 1 174 "0"
d G "T0_DIV_4" 1 175 "1"
d G "T0_DIV_8" 1 176 "2"
d G "T0_DIV_16" 1 177 "3"
d G "T0_DIV_32" 1 178 "4"
d G "T0_DIV_64" 1 179 "5"
d G "T0_DIV_128" 1 180 "6"
d G "T0_DIV_256" 1 181 "7"
d G "T0_OFF" 1 183 "0x80"
d G "T0_8_BIT" 1 185 "0x40"
d G "RTCC_INTERNAL" 1 187 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 188 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 189 "48"
d G "RTCC_DIV_1" 1 190 "8"
d G "RTCC_DIV_2" 1 191 "0"
d G "RTCC_DIV_4" 1 192 "1"
d G "RTCC_DIV_8" 1 193 "2"
d G "RTCC_DIV_16" 1 194 "3"
d G "RTCC_DIV_32" 1 195 "4"
d G "RTCC_DIV_64" 1 196 "5"
d G "RTCC_DIV_128" 1 197 "6"
d G "RTCC_DIV_256" 1 198 "7"
d G "RTCC_OFF" 1 199 "0x80"
d G "RTCC_8_BIT" 1 200 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 211 ""
v L "mode" 1 211 "int16" `124 
f B "setup_wdt" 1 211 "void(int16 mode)" `123 
f N "restart_wdt" 1 212 ""
f B "restart_wdt" 1 212 "void()" `125  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 214 "0x100"
d G "WDT_OFF" 1 215 "0"
d G "WDT_4MS" 1 217 "0x300"
d G "WDT_8MS" 1 218 "0x500"
d G "WDT_16MS" 1 219 "0x700"
d G "WDT_32MS" 1 220 "0x900"
d G "WDT_64MS" 1 221 "0xB00"
d G "WDT_128MS" 1 222 "0xD00"
d G "WDT_256MS" 1 223 "0xF00"
d G "WDT_512MS" 1 224 "0x1100"
d G "WDT_1S" 1 225 "0x1300"
d G "WDT_2S" 1 226 "0x1500"
d G "WDT_4S" 1 227 "0x1700"
d G "WDT_8S" 1 228 "0x1900"
d G "WDT_16" 1 229 "0x1B00"
d G "WDT_32S" 1 230 "0x1D00"
d G "WDT_64S" 1 231 "0x1F00"
d G "WDT_128S" 1 232 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 237 ""
v L "mode" 1 237 "int16" `127 
f B "setup_timer_1" 1 237 "void(int16 mode)" `126 
f N "get_timer1" 1 238 ""
f B "get_timer1" 1 238 "int16()" `128 
f N "set_timer1" 1 239 ""
v L "value" 1 239 "int16" `130 
f B "set_timer1" 1 239 "void(int16 value)" `129  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 242 "0"
d G "T1_INTERNAL" 1 243 "0x85"
d G "T1_EXTERNAL" 1 244 "0x87"
d G "T1_EXTERNAL_SYNC" 1 245 "0x83"
d G "T1_CLK_OUT" 1 247 "8"
d G "T1_DIV_BY_1" 1 249 "0"
d G "T1_DIV_BY_2" 1 250 "0x10"
d G "T1_DIV_BY_4" 1 251 "0x20"
d G "T1_DIV_BY_8" 1 252 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 257 ""
v L "mode" 1 257 "int8" `132 
v L "period" 1 257 "int8" `133 
v L "postscale" 1 257 "int8" `134 
f B "setup_timer_2" 1 257 "void(int8 mode,int8 period,int8 postscale)" `131 
f N "get_timer2" 1 258 ""
f B "get_timer2" 1 258 "int8()" `135 
f N "set_timer2" 1 259 ""
v L "value" 1 259 "int8" `137 
f B "set_timer2" 1 259 "void(int8 value)" `136  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 261 "0"
d G "T2_DIV_BY_1" 1 262 "4"
d G "T2_DIV_BY_4" 1 263 "5"
d G "T2_DIV_BY_16" 1 264 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 269 ""
v L "mode" 1 269 "int16" `139 
f B "setup_timer_3" 1 269 "void(int16 mode)" `138 
f N "get_timer3" 1 270 ""
f B "get_timer3" 1 270 "int16()" `140 
f N "set_timer3" 1 271 ""
v L "value" 1 271 "int16" `142 
f B "set_timer3" 1 271 "void(int16 value)" `141  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 274 "0"
d G "T3_INTERNAL" 1 275 "0x85"
d G "T3_EXTERNAL" 1 276 "0x87"
d G "T3_EXTERNAL_SYNC" 1 277 "0x83"
d G "T3_DIV_BY_1" 1 279 "0"
d G "T3_DIV_BY_2" 1 280 "0x10"
d G "T3_DIV_BY_4" 1 281 "0x20"
d G "T3_DIV_BY_8" 1 282 "0x30"
d G "T3_CCP1_TO_2" 1 285 "0x48"
d G "T3_CCP2" 1 286 "0x8"
c L "set_timer3" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 292 ""
v L "mode" 1 292 "int32" `144 
f B "setup_ccp1" 1 292 "void(int32 mode)" `143 
f N "setup_ccp1" 1 293 ""
v L "mode" 1 293 "int32" `146 
v L "pwm" 1 293 "int8" `147 
f G "setup_ccp1" 1 293 "void(int32 mode,int8 pwm)" `145 
f N "set_pwm1_duty" 1 294 ""
v L "value" 1 294 "int16" `149 
f B "set_pwm1_duty" 1 294 "void(int16 value)" `148  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 296 "0"
d G "CCP_CAPTURE_FE" 1 297 "0x04"
d G "CCP_CAPTURE_RE" 1 298 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 299 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 300 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 301 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 302 "0x09"
d G "CCP_COMPARE_INT" 1 303 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 304 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 305 "0x0B"
d G "CCP_PWM" 1 306 "0x0C"
d G "CCP_PWM_PLUS_1" 1 307 "0x1c"
d G "CCP_PWM_PLUS_2" 1 308 "0x2c"
d G "CCP_PWM_PLUS_3" 1 309 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 1 316 "0x0c"
d G "CCP_PWM_H_L" 1 317 "0x0d"
d G "CCP_PWM_L_H" 1 318 "0x0e"
d G "CCP_PWM_L_L" 1 319 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 321 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 322 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 323 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 325 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 326 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 327 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 328 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 329 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 330 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 331 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 333 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 334 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 335 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 337 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 338 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 339 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 341 "0x80000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 345 ""
v L "mode" 1 345 "int32" `154 
f B "setup_ccp2" 1 345 "void(int32 mode)" `153 
f N "setup_ccp2" 1 346 ""
v L "mode" 1 346 "int32" `156 
v L "pwm" 1 346 "int8" `157 
f G "setup_ccp2" 1 346 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm2_duty" 1 347 ""
v L "value" 1 347 "int16" `159 
f B "set_pwm2_duty" 1 347 "void(int16 value)" `158 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
f N "setup_psp" 1 356 ""
v L "mode" 1 356 "int8" `164 
f B "setup_psp" 1 356 "void(int8 mode)" `163 
f N "psp_output_full" 1 357 ""
f B "psp_output_full" 1 357 "int8()" `165 
f N "psp_input_full" 1 358 ""
f B "psp_input_full" 1 358 "int8()" `166 
f N "psp_overflow" 1 359 ""
f B "psp_overflow" 1 359 "int8()" `167  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 361 "0x10"
d G "PSP_DISABLED" 1 362 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
f N "setup_spi" 1 369 ""
v L "mode" 1 369 "int32" `170 
f B "setup_spi" 1 369 "void(int32 mode)" `169 
f N "spi_write" 1 370 ""
v L "value" 1 370 "int8" `172 
f B "spi_write" 1 370 "void(int8 value)" `171 
f N "spi_read" 1 371 ""
f B "spi_read" 1 371 "int8()" `173 
f N "spi_read" 1 372 ""
v L "value" 1 372 "int8" `175 
f G "spi_read" 1 372 "int8(int8 value)" `174 
f N "spi_data_in" 1 373 ""
f B "spi_data_in" 1 373 "int8()" `176 
f N "setup_spi2" 1 374 ""
v L "mode" 1 374 "int32" `178 
f B "setup_spi2" 1 374 "void(int32 mode)" `177 
f N "spi_write2" 1 375 ""
v L "value" 1 375 "int8" `180 
f B "spi_write2" 1 375 "void(int8 value)" `179 
f N "spi_read2" 1 376 ""
f B "spi_read2" 1 376 "int8()" `181 
f N "spi_read2" 1 377 ""
v L "value" 1 377 "int8" `183 
f G "spi_read2" 1 377 "int8(int8 value)" `182 
f N "spi_data_in2" 1 378 ""
f B "spi_data_in2" 1 378 "int8()" `184  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 380 "0x00"
d G "SPI_MASTER" 1 381 "0x20"
d G "SPI_SLAVE" 1 382 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 383 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 384 "0x00"
d G "SPI_CLK_DIV_4" 1 385 "0x00"
d G "SPI_CLK_DIV_16" 1 386 "0x01"
d G "SPI_CLK_DIV_64" 1 387 "0x02"
d G "SPI_CLK_T2" 1 388 "0x03"
d G "SPI_SS_DISABLED" 1 389 "0x01"
d G "SPI_XMIT_L_TO_H" 1 391 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 392 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 394 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 395 "0x8000"
d G "SPI_L_TO_H" 1 398 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 399 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 403 ""
v L "baud" 1 403 "int32" `186 
f B "setup_uart" 1 403 "void(int32 baud)" `185 
f N "setup_uart" 1 404 ""
v L "baud" 1 404 "int32" `188 
v L "stream" 1 404 "int8" `189 
f G "setup_uart" 1 404 "void(int32 baud,int8 stream)" `187 
f N "setup_uart" 1 405 ""
v L "baud" 1 405 "int32" `191 
v L "stream" 1 405 "int8" `192 
v L "clock" 1 405 "int32" `193 
f G "setup_uart" 1 405 "void(int32 baud,int8 stream,int32 clock)" `190 
f N "set_uart_speed" 1 406 ""
v L "baud" 1 406 "int32" `195 
f B "set_uart_speed" 1 406 "void(int32 baud)" `194 
f N "set_uart_speed" 1 407 ""
v L "baud" 1 407 "int32" `197 
v L "stream" 1 407 "int8" `198 
f G "set_uart_speed" 1 407 "void(int32 baud,int8 stream)" `196 
f N "set_uart_speed" 1 408 ""
v L "baud" 1 408 "int32" `200 
v L "stream" 1 408 "int8" `201 
v L "clock" 1 408 "int32" `202 
f G "set_uart_speed" 1 408 "void(int32 baud,int8 stream,int32 clock)" `199  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 412 "2"
d G "UART_DATA" 1 413 "4"
d G "UART_AUTODETECT" 1 414 "8"
d G "UART_AUTODETECT_NOWAIT" 1 415 "9"
d G "UART_WAKEUP_ON_RDA" 1 416 "10"
d G "UART_SEND_BREAK" 1 417 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 421 ""
v L "mode" 1 421 "int32" `204 
f B "setup_comparator" 1 421 "void(int32 mode)" `203  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 423 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 424 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 425 "0xbcf05"
d G "NC_NC_NC_NC" 1 426 "0x0ff07"
d G "A0_A3_A1_A2" 1 427 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 428 "0x9ef01"
d G "A0_VR_A1_VR" 1 429 "0x3ff06"
d G "A3_VR_A2_VR" 1 430 "0xcff0e"
d G "CP1_INVERT" 1 431 "0x0000010"
d G "CP2_INVERT" 1 432 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 439 ""
v L "mode" 1 439 "int8" `208 
f B "setup_vref" 1 439 "void(int8 mode)" `207  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 441 "0xa0"
d G "VREF_HIGH" 1 442 "0x80"
d G "VREF_F5" 1 444 "0x40"
d G "VREF_COMP" 1 445 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_low_volt_detect" 1 449 ""
v L "mode" 1 449 "int8" `210 
f B "setup_low_volt_detect" 1 449 "void(int8 mode)" `209  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 451 "0x1F"
d G "LVD_45" 1 452 "0x1E"
d G "LVD_42" 1 453 "0x1D"
d G "LVD_40" 1 454 "0x1C"
d G "LVD_38" 1 455 "0x1B"
d G "LVD_36" 1 456 "0x1A"
d G "LVD_35" 1 457 "0x19"
d G "LVD_33" 1 458 "0x18"
d G "LVD_30" 1 459 "0x17"
d G "LVD_28" 1 460 "0x16"
d G "LVD_27" 1 461 "0x15"
d G "LVD_25" 1 462 "0x14"
d G "LVD_24" 1 463 "0x13"
d G "LVD_23" 1 464 "0x12"
d G "LVD_22" 1 465 "0x11"
d G "LVD_21" 1 466 "0x10"
d G "LVD_TRIGGER_BELOW" 1 468 "0"
d G "LVD_TRIGGER_ABOVE" 1 469 "0x80"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 474 ""
v L "mode" 1 474 "int16" `212 
f B "setup_oscillator" 1 474 "int8(int16 mode)" `211 
f N "setup_oscillator" 1 475 ""
v L "mode" 1 475 "int16" `214 
v L "tune" 1 475 "sint8" `215 
f G "setup_oscillator" 1 475 "int8(int16 mode,sint8 tune)" `213  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 478 "0"
d G "OSC_125KHZ" 1 479 "0x10"
d G "OSC_250KHZ" 1 480 "0x20"
d G "OSC_500KHZ" 1 481 "0x30"
d G "OSC_1MHZ" 1 482 "0x40"
d G "OSC_2MHZ" 1 483 "0x50"
d G "OSC_4MHZ" 1 484 "0x60"
d G "OSC_8MHZ" 1 485 "0x70"
d G "OSC_TIMER1" 1 487 "1"
d G "OSC_INTRC" 1 488 "2"
d G "OSC_NORMAL" 1 489 "0"
d G "OSC_IDLE_MODE" 1 491 "0x80"
d G "OSC_31250" 1 492 "0x8000"
d G "OSC_STATE_STABLE" 1 496 "4"
d G "OSC_STATE_EXT_RUNNING" 1 497 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 504 ""
v L "mode" 1 504 "int16" `217 
f B "setup_adc" 1 504 "void(int16 mode)" `216 
f N "read_adc" 1 505 ""
f B "read_adc" 1 505 "int8()" `218 
f N "read_adc" 1 506 ""
v L "mode" 1 506 "int8" `220 
f G "read_adc" 1 506 "int8(int8 mode)" `219 
f N "read_adc" 1 507 ""
f G "read_adc" 1 507 "int16()" `221 
f N "read_adc" 1 508 ""
v L "mode" 1 508 "int8" `223 
f G "read_adc" 1 508 "int16(int8 mode)" `222 
f N "adc_done" 1 509 ""
f B "adc_done" 1 509 "int8()" `224  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 511 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 512 "0x100"
d G "ADC_CLOCK_DIV_4" 1 513 "0x04"
d G "ADC_CLOCK_DIV_8" 1 514 "0x01"
d G "ADC_CLOCK_DIV_16" 1 515 "0x05"
d G "ADC_CLOCK_DIV_32" 1 516 "0x02"
d G "ADC_CLOCK_DIV_64" 1 517 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 518 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 520 "0x00"
d G "ADC_TAD_MUL_2" 1 521 "0x08"
d G "ADC_TAD_MUL_4" 1 522 "0x10"
d G "ADC_TAD_MUL_6" 1 523 "0x18"
d G "ADC_TAD_MUL_8" 1 524 "0x20"
d G "ADC_TAD_MUL_12" 1 525 "0x28"
d G "ADC_TAD_MUL_16" 1 526 "0x30"
d G "ADC_TAD_MUL_20" 1 527 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 530 ""
v L "pins" 1 530 "int8" `226 
f B "setup_adc_ports" 1 530 "void(int8 pins)" `225 
f N "setup_adc_ports" 1 531 ""
v L "pins" 1 531 "int8" `228 
v L "reference" 1 531 "int8" `229 
f G "setup_adc_ports" 1 531 "void(int8 pins,int8 reference)" `227 
f N "set_analog_pins" 1 532 ""
v L "pins" 1 532 "int8" `231 
f B "set_analog_pins" 1 532 "void(int8 pins)" `230 
f N "set_analog_pins" 1 533 ""
v L "pins" 1 533 "int8" `233 
v L "reference" 1 533 "int8" `234 
f G "set_analog_pins" 1 533 "void(int8 pins,int8 reference)" `232 
f N "set_adc_channel" 1 534 ""
v L "channel" 1 534 "int8" `236 
f B "set_adc_channel" 1 534 "void(int8 channel)" `235  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 537 "0x0F" "None"
d G "ALL_ANALOG" 1 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 539 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 540 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 541 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 542 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 543 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 544 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 545 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 546 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 547 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 548 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 549 "0x0D" "A0 A1"
d G "AN0" 1 550 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 551 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 552 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 553 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 554 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 555 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 556 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 557 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 558 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 559 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 560 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 561 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 562 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 565 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 566 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 567 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 568 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 571 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 572 "1"
d G "ADC_READ_ONLY" 1 573 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 579 ""
v L "x" 1 579 "sint8" `238 
f B "abs" 1 579 "sint8(sint8 x)" `237 
f N "abs" 1 580 ""
v L "x" 1 580 "sint16" `240 
f G "abs" 1 580 "sint16(sint16 x)" `239 
f N "abs" 1 581 ""
v L "x" 1 581 "sint32" `242 
f G "abs" 1 581 "sint32(sint32 x)" `241 
f N "abs" 1 582 ""
v L "x" 1 582 "float" `244 
f G "abs" 1 582 "float(float x)" `243 
f N "_mul" 1 583 ""
v L "??65535" 1 583 "int8" `246 
v L "??65535" 1 583 "int8" `247 
f B "_mul" 1 583 "int16(int8 ,int8 )" `245 
f N "_mul" 1 584 ""
v L "??65535" 1 584 "sint8" `246 
v L "??65535" 1 584 "sint8" `250 
f G "_mul" 1 584 "sint16(sint8 ,sint8 )" `248 
f N "_mul" 1 585 ""
v L "??65535" 1 585 "int16" `246 
v L "??65535" 1 585 "int16" `253 
f G "_mul" 1 585 "int32(int16 ,int16 )" `251 
f N "_mul" 1 586 ""
v L "??65535" 1 586 "sint16" `246 
v L "??65535" 1 586 "sint16" `256 
f G "_mul" 1 586 "sint32(sint16 ,sint16 )" `254  "Memory Manipulation Prototypes:"
f N "read_bank" 1 589 ""
v L "bank" 1 589 "int8" `258 
v L "offset" 1 589 "int8" `259 
f B "read_bank" 1 589 "int8(int8 bank,int8 offset)" `257 
f N "write_bank" 1 590 ""
v L "bank" 1 590 "int8" `261 
v L "offset" 1 590 "int8" `262 
v L "value" 1 590 "int8" `263 
f B "write_bank" 1 590 "void(int8 bank,int8 offset,int8 value)" `260 
f N "strcpy" 1 591 ""
v L "dest" 1 591 "*int8" `265 
v L "src" 1 591 "*int8" `266 
f B "strcpy" 1 591 "void(*int8 dest,*int8 src)" `264 
f N "memset" 1 592 ""
v L "destination" 1 592 "*int8" `268 
v L "value" 1 592 "int8" `269 
v L "num" 1 592 "int16" `270 
f B "memset" 1 592 "void(*int8 destination,int8 value,int16 num)" `267 
f N "memcpy" 1 593 ""
v L "destination" 1 593 "*int8" `272 
v L "source" 1 593 "*int8" `273 
v L "num" 1 593 "int16" `274 
f B "memcpy" 1 593 "void(*int8 destination,*int8 source,int16 num)" `271  "String Prototypes:"
f N "toupper" 1 596 ""
v L "cvalue" 1 596 "int8" `276 
f B "toupper" 1 596 "int8(int8 cvalue)" `275 
f N "tolower" 1 597 ""
v L "cvalue" 1 597 "int8" `278 
f B "tolower" 1 597 "int8(int8 cvalue)" `277 
f N "sprintf" 1 598 ""
v L "string" 1 598 "*int8" `280 
v L "cstring" 1 598 "*int8" `281 
f B "sprintf" 1 598 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `279  "Data Manipulators Prototypes:"
f N "shift_left" 1 601 ""
v L "address" 1 601 "*int8" `284 
v L "bytes" 1 601 "int8" `285 
v L "value" 1 601 "int8" `286 
f B "shift_left" 1 601 "int8(*int8 address,int8 bytes,int8 value)" `283 
f N "shift_right" 1 602 ""
v L "address" 1 602 "*int8" `288 
v L "bytes" 1 602 "int8" `289 
v L "value" 1 602 "int8" `290 
f B "shift_right" 1 602 "int8(*int8 address,int8 bytes,int8 value)" `287 
f N "rotate_left" 1 603 ""
v L "address" 1 603 "*int8" `292 
v L "bytes" 1 603 "int8" `293 
f B "rotate_left" 1 603 "void(*int8 address,int8 bytes)" `291 
f N "rotate_right" 1 604 ""
v L "address" 1 604 "*int8" `295 
v L "bytes" 1 604 "int8" `296 
f B "rotate_right" 1 604 "void(*int8 address,int8 bytes)" `294 
f N "swap" 1 605 ""
v L "value" 1 605 "int8" `298 
f B "swap" 1 605 "void(int8 value)" `297 
f N "make8" 1 606 ""
v L "var" 1 606 "int16" `300 
v L "offset" 1 606 "int8" `301 
f B "make8" 1 606 "int8(int16 var,int8 offset)" `299 
f N "make8" 1 607 ""
v L "var" 1 607 "int32" `300 
v L "offset" 1 607 "int8" `304 
f G "make8" 1 607 "int8(int32 var,int8 offset)" `302 
f N "make16" 1 608 ""
v L "varhigh" 1 608 "int8" `306 
v L "varlow" 1 608 "int8" `307 
f B "make16" 1 608 "int16(int8 varhigh,int8 varlow)" `305 
f N "make32" 1 609 ""
v L "var1" 1 609 "int16" `309 
f B "make32" 1 609 "int32(int16 var1)" `308 
f N "make32" 1 610 ""
v L "var1" 1 610 "int16" `311 
v L "var2" 1 610 "int16" `312 
f G "make32" 1 610 "int32(int16 var1,int16 var2)" `310 
f N "make32" 1 611 ""
v L "var1" 1 611 "int16" `311 
v L "var2" 1 611 "int8" `315 
f G "make32" 1 611 "int32(int16 var1,int8 var2)" `313 
f N "make32" 1 612 ""
v L "var1" 1 612 "int16" `317 
v L "var2" 1 612 "int8" `318 
v L "var3" 1 612 "int8" `319 
f G "make32" 1 612 "int32(int16 var1,int8 var2,int8 var3)" `316 
f N "make32" 1 613 ""
v L "var1" 1 613 "int8" `321 
f G "make32" 1 613 "int32(int8 var1)" `320 
f N "make32" 1 614 ""
v L "var1" 1 614 "int8" `311 
v L "var2" 1 614 "int8" `324 
f G "make32" 1 614 "int32(int8 var1,int8 var2)" `322 
f N "make32" 1 615 ""
v L "var1" 1 615 "int8" `317 
v L "var2" 1 615 "int8" `318 
v L "var3" 1 615 "int8" `328 
f G "make32" 1 615 "int32(int8 var1,int8 var2,int8 var3)" `325 
f N "make32" 1 616 ""
v L "var1" 1 616 "int8" `330 
v L "var2" 1 616 "int8" `331 
v L "var3" 1 616 "int8" `332 
v L "var4" 1 616 "int8" `333 
f G "make32" 1 616 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `329 
f N "make32" 1 617 ""
v L "var1" 1 617 "int8" `311 
v L "var2" 1 617 "int16" `336 
f G "make32" 1 617 "int32(int8 var1,int16 var2)" `334 
f N "make32" 1 618 ""
v L "var1" 1 618 "int8" `317 
v L "var2" 1 618 "int16" `318 
v L "var3" 1 618 "int8" `340 
f G "make32" 1 618 "int32(int8 var1,int16 var2,int8 var3)" `337 
f N "make32" 1 619 ""
v L "var1" 1 619 "int8" `317 
v L "var2" 1 619 "int8" `318 
v L "var3" 1 619 "int16" `344 
f G "make32" 1 619 "int32(int8 var1,int8 var2,int16 var3)" `341 
f N "bit_set" 1 620 ""
v L "var" 1 620 "int8" `346 
v L "bit" 1 620 "int8" `347 
f B "bit_set" 1 620 "void(int8 var,int8 bit)" `345 
f N "bit_set" 1 621 ""
v L "var" 1 621 "int16" `346 
v L "bit" 1 621 "int8" `350 
f G "bit_set" 1 621 "void(int16 var,int8 bit)" `348 
f N "bit_set" 1 622 ""
v L "var" 1 622 "int32" `346 
v L "bit" 1 622 "int8" `353 
f G "bit_set" 1 622 "void(int32 var,int8 bit)" `351 
f N "bit_clear" 1 623 ""
v L "var" 1 623 "int8" `355 
v L "bit" 1 623 "int8" `356 
f B "bit_clear" 1 623 "void(int8 var,int8 bit)" `354 
f N "bit_clear" 1 624 ""
v L "var" 1 624 "int16" `355 
v L "bit" 1 624 "int8" `359 
f G "bit_clear" 1 624 "void(int16 var,int8 bit)" `357 
f N "bit_clear" 1 625 ""
v L "var" 1 625 "int32" `355 
v L "bit" 1 625 "int8" `362 
f G "bit_clear" 1 625 "void(int32 var,int8 bit)" `360 
f N "bit_test" 1 626 ""
v L "var" 1 626 "int8" `364 
v L "bit" 1 626 "int8" `365 
f B "bit_test" 1 626 "int8(int8 var,int8 bit)" `363 
f N "bit_test" 1 627 ""
v L "var" 1 627 "int16" `364 
v L "bit" 1 627 "int8" `368 
f G "bit_test" 1 627 "int8(int16 var,int8 bit)" `366 
f N "bit_test" 1 628 ""
v L "var" 1 628 "int32" `364 
v L "bit" 1 628 "int8" `371 
f G "bit_test" 1 628 "int8(int32 var,int8 bit)" `369  "#use delay() Prototypes:"
f N "delay_cycles" 1 631 ""
v L "count" 1 631 "int8" `373 
f B "delay_cycles" 1 631 "void(int8 count)" `372 
f N "delay_ms" 1 632 ""
v L "time" 1 632 "int16" `375 
f B "delay_ms" 1 632 "void(int16 time)" `374 
f N "delay_us" 1 633 ""
v L "time" 1 633 "int16" `377 
f B "delay_us" 1 633 "void(int16 time)" `376  "#use rs232() Prototypes:"
f N "putchar" 1 636 ""
v L "cdata" 1 636 "int8" `379 
f B "putchar" 1 636 "void(int8 cdata)" `378 
f N "putchar" 1 637 ""
v L "cdata" 1 637 "int8" `381 
v L "stream" 1 637 "int8" `382 
f G "putchar" 1 637 "void(int8 cdata,int8 stream)" `380 
f N "puts" 1 638 ""
v L "string" 1 638 "*int8" `384 
f B "puts" 1 638 "void(*int8 string)" `383 
f N "puts" 1 639 ""
v L "string" 1 639 "*int8" `386 
v L "stream" 1 639 "int8" `387 
f G "puts" 1 639 "void(*int8 string,int8 stream)" `385 
f N "getch" 1 640 ""
f B "getch" 1 640 "int8()" `388 
f N "getch" 1 641 ""
v L "stream" 1 641 "int8" `390 
f G "getch" 1 641 "int8(int8 stream)" `389 
f N "gets" 1 642 ""
v L "string" 1 642 "*int8" `392 
f B "gets" 1 642 "void(*int8 string)" `391 
f N "gets" 1 643 ""
v L "string" 1 643 "*int8" `394 
v L "stream" 1 643 "int8" `395 
f G "gets" 1 643 "void(*int8 string,int8 stream)" `393 
f N "kbhit" 1 644 ""
f B "kbhit" 1 644 "int8()" `396 
f N "kbhit" 1 645 ""
v L "stream" 1 645 "int8" `398 
f G "kbhit" 1 645 "int8(int8 stream)" `397 
f N "printf" 1 646 ""
v L "string" 1 646 "*int8" `400 
f B "printf" 1 646 "void(*int8 string,*int8 _VA_LIST)" `399 
f N "fprintf" 1 647 ""
v L "stream" 1 647 "int8" `403 
v L "string" 1 647 "*int8" `404 
f B "fprintf" 1 647 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `402 
f N "putc_send" 1 648 ""
f B "putc_send" 1 648 "void()" `406 
f N "fputc_send" 1 649 ""
v L "stream" 1 649 "int8" `408 
f B "fputc_send" 1 649 "void(int8 stream)" `407 
f N "rcv_buffer_full" 1 650 ""
f B "rcv_buffer_full" 1 650 "int8()" `409 
f N "rcv_buffer_full" 1 651 ""
v L "stream" 1 651 "int8" `411 
f G "rcv_buffer_full" 1 651 "int8(int8 stream)" `410 
f N "rcv_buffer_bytes" 1 652 ""
f B "rcv_buffer_bytes" 1 652 "int16()" `412 
f N "rcv_buffer_bytes" 1 653 ""
v L "stream" 1 653 "int8" `414 
f G "rcv_buffer_bytes" 1 653 "int16(int8 stream)" `413 
f N "tx_buffer_full" 1 654 ""
f B "tx_buffer_full" 1 654 "int8()" `415 
f N "tx_buffer_full" 1 655 ""
v L "stream" 1 655 "int8" `417 
f G "tx_buffer_full" 1 655 "int8(int8 stream)" `416 
f N "tx_buffer_bytes" 1 656 ""
f B "tx_buffer_bytes" 1 656 "int16()" `418 
f N "tx_buffer_bytes" 1 657 ""
v L "stream" 1 657 "int8" `420 
f G "tx_buffer_bytes" 1 657 "int16(int8 stream)" `419  "#use i2c() Prototypes:"
f N "i2c_read" 1 660 ""
f B "i2c_read" 1 660 "int8()" `421 
f N "i2c_read" 1 661 ""
v L "stream" 1 661 "int8" `423 
f G "i2c_read" 1 661 "int8(int8 stream)" `422 
f N "i2c_read" 1 662 ""
v L "stream" 1 662 "int8" `425 
v L "ack" 1 662 "int8" `426 
f G "i2c_read" 1 662 "int8(int8 stream,int8 ack)" `424 
f N "i2c_write" 1 663 ""
v L "data" 1 663 "int8" `428 
f B "i2c_write" 1 663 "int8(int8 data)" `427 
f N "i2c_write" 1 664 ""
v L "stream" 1 664 "int8" `430 
v L "data" 1 664 "int8" `431 
f G "i2c_write" 1 664 "int8(int8 stream,int8 data)" `429 
f N "i2c_start" 1 665 ""
f B "i2c_start" 1 665 "void()" `432 
f N "i2c_start" 1 666 ""
v L "stream" 1 666 "int8" `434 
f G "i2c_start" 1 666 "void(int8 stream)" `433 
f N "i2c_start" 1 667 ""
v L "stream" 1 667 "int8" `436 
v L "restart" 1 667 "int8" `437 
f G "i2c_start" 1 667 "void(int8 stream,int8 restart)" `435 
f N "i2c_stop" 1 668 ""
f B "i2c_stop" 1 668 "void()" `438 
f N "i2c_stop" 1 669 ""
v L "stream" 1 669 "int8" `440 
f G "i2c_stop" 1 669 "void(int8 stream)" `439 
f N "i2c_isr_state" 1 670 ""
f B "i2c_isr_state" 1 670 "int8()" `441 
f N "i2c_slaveaddr" 1 671 ""
v L "addr" 1 671 "int8" `443 
f B "i2c_slaveaddr" 1 671 "void(int8 addr)" `442 
f N "i2c_slaveaddr" 1 672 ""
v L "stream" 1 672 "int8" `445 
v L "addr" 1 672 "int8" `446 
f G "i2c_slaveaddr" 1 672 "void(int8 stream,int8 addr)" `444 
f N "i2c_poll" 1 673 ""
f B "i2c_poll" 1 673 "int8()" `447 
f N "i2c_poll" 1 674 ""
v L "stream" 1 674 "int8" `449 
f G "i2c_poll" 1 674 "int8(int8 stream)" `448 
f N "i2c_init" 1 675 ""
v L "baud" 1 675 "int32" `451 
f B "i2c_init" 1 675 "void(int32 baud)" `450 
f N "i2c_init" 1 676 ""
v L "stream" 1 676 "int8" `453 
v L "baud" 1 676 "int32" `454 
f G "i2c_init" 1 676 "void(int8 stream,int32 baud)" `452  "#use spi() Prototypes:"
f N "spi_xfer" 1 679 ""
f B "spi_xfer" 1 679 "int8()" `455 
f N "spi_xfer" 1 680 ""
f G "spi_xfer" 1 680 "int16()" `456 
f N "spi_xfer" 1 681 ""
f G "spi_xfer" 1 681 "int32()" `457 
f N "spi_xfer" 1 682 ""
v L "data" 1 682 "int8" `459 
f G "spi_xfer" 1 682 "int8(int8 data)" `458 
f N "spi_xfer" 1 683 ""
v L "data" 1 683 "int16" `461 
f G "spi_xfer" 1 683 "int16(int16 data)" `460 
f N "spi_xfer" 1 684 ""
v L "data" 1 684 "int32" `463 
f G "spi_xfer" 1 684 "int32(int32 data)" `462 
f N "spi_xfer" 1 685 ""
v L "stream" 1 685 "int8" `465 
v L "data" 1 685 "int8" `466 
f G "spi_xfer" 1 685 "int8(int8 stream,int8 data)" `464 
f N "spi_xfer" 1 686 ""
v L "stream" 1 686 "int8" `465 
v L "data" 1 686 "int16" `469 
f G "spi_xfer" 1 686 "int16(int8 stream,int16 data)" `467 
f N "spi_xfer" 1 687 ""
v L "stream" 1 687 "int8" `465 
v L "data" 1 687 "int32" `472 
f G "spi_xfer" 1 687 "int32(int8 stream,int32 data)" `470 
f N "spi_xfer" 1 688 ""
v L "stream" 1 688 "int8" `474 
v L "data" 1 688 "int8" `475 
v L "bits" 1 688 "int8" `476 
f G "spi_xfer" 1 688 "int8(int8 stream,int8 data,int8 bits)" `473 
f N "spi_xfer" 1 689 ""
v L "stream" 1 689 "int8" `474 
v L "data" 1 689 "int16" `475 
v L "bits" 1 689 "int8" `480 
f G "spi_xfer" 1 689 "int16(int8 stream,int16 data,int8 bits)" `477 
f N "spi_xfer" 1 690 ""
v L "stream" 1 690 "int8" `474 
v L "data" 1 690 "int32" `475 
v L "bits" 1 690 "int8" `484 
f G "spi_xfer" 1 690 "int32(int8 stream,int32 data,int8 bits)" `481 
f N "spi_init" 1 691 ""
v L "baud" 1 691 "int32" `486 
f B "spi_init" 1 691 "void(int32 baud)" `485 
f N "spi_init" 1 692 ""
v L "stream" 1 692 "int8" `488 
v L "baud" 1 692 "int32" `489 
f G "spi_init" 1 692 "void(int8 stream,int32 baud)" `487 
f N "spi_speed" 1 693 ""
v L "baud" 1 693 "int32" `491 
f B "spi_speed" 1 693 "void(int32 baud)" `490 
f N "spi_speed" 1 694 ""
v L "stream" 1 694 "int8" `493 
v L "baud" 1 694 "int32" `494 
f G "spi_speed" 1 694 "void(int8 stream,int32 baud)" `492 
f N "spi_speed" 1 695 ""
v L "stream" 1 695 "int8" `496 
v L "baud" 1 695 "int32" `497 
v L "clock" 1 695 "int32" `498 
f G "spi_speed" 1 695 "void(int8 stream,int32 baud,int32 clock)" `495 
f N "spi_prewrite" 1 696 ""
v L "data" 1 696 "int8" `500 
f B "spi_prewrite" 1 696 "void(int8 data)" `499 
f N "spi_prewrite" 1 697 ""
v L "data" 1 697 "int16" `502 
f G "spi_prewrite" 1 697 "void(int16 data)" `501 
f N "spi_prewrite" 1 698 ""
v L "data" 1 698 "int32" `504 
f G "spi_prewrite" 1 698 "void(int32 data)" `503 
f N "spi_prewrite" 1 699 ""
v L "??65535" 1 699 "int8" `506 
v L "data" 1 699 "int8" `507 
f G "spi_prewrite" 1 699 "void(int8 ,int8 data)" `505 
f N "spi_prewrite" 1 700 ""
v L "??65535" 1 700 "int8" `506 
v L "data" 1 700 "int16" `510 
f G "spi_prewrite" 1 700 "void(int8 ,int16 data)" `508 
f N "spi_prewrite" 1 701 ""
v L "??65535" 1 701 "int8" `506 
v L "data" 1 701 "int32" `513 
f G "spi_prewrite" 1 701 "void(int8 ,int32 data)" `511 
f N "spi_xfer_in" 1 702 ""
f B "spi_xfer_in" 1 702 "int8()" `514 
f N "spi_xfer_in" 1 703 ""
f G "spi_xfer_in" 1 703 "int16()" `515 
f N "spi_xfer_in" 1 704 ""
f G "spi_xfer_in" 1 704 "int32()" `516 
f N "spi_xfer_in" 1 705 ""
v L "bits" 1 705 "int8" `518 
f G "spi_xfer_in" 1 705 "int8(int8 bits)" `517 
f N "spi_xfer_in" 1 706 ""
v L "bits" 1 706 "int8" `520 
f G "spi_xfer_in" 1 706 "int16(int8 bits)" `519 
f N "spi_xfer_in" 1 707 ""
v L "bits" 1 707 "int8" `522 
f G "spi_xfer_in" 1 707 "int32(int8 bits)" `521 
f N "spi_xfer_in" 1 708 ""
v L "stream" 1 708 "int8" `524 
v L "bits" 1 708 "int8" `525 
f G "spi_xfer_in" 1 708 "int8(int8 stream,int8 bits)" `523 
f N "spi_xfer_in" 1 709 ""
v L "stream" 1 709 "int8" `524 
v L "bits" 1 709 "int8" `528 
f G "spi_xfer_in" 1 709 "int16(int8 stream,int8 bits)" `526 
f N "spi_xfer_in" 1 710 ""
v L "stream" 1 710 "int8" `524 
v L "bits" 1 710 "int8" `531 
f G "spi_xfer_in" 1 710 "int32(int8 stream,int8 bits)" `529  "#use rtos() Prototypes:"
f N "rtos_run" 1 713 ""
f B "rtos_run" 1 713 "void()" `532 
f N "rtos_yield" 1 714 ""
f B "rtos_yield" 1 714 "void()" `533 
f N "rtos_enable" 1 715 ""
v L "task" 1 715 "int8" `535 
f B "rtos_enable" 1 715 "void(int8 task)" `534 
f N "rtos_disable" 1 716 ""
v L "task" 1 716 "int8" `537 
f B "rtos_disable" 1 716 "void(int8 task)" `536 
f N "rtos_terminate" 1 717 ""
f B "rtos_terminate" 1 717 "void()" `538 
f N "rtos_await" 1 718 ""
v L "flag" 1 718 "int8" `540 
f B "rtos_await" 1 718 "void(int8 flag)" `539 
f N "rtos_wait" 1 719 ""
v L "sem" 1 719 "int8" `542 
f B "rtos_wait" 1 719 "void(int8 sem)" `541 
f N "rtos_signal" 1 720 ""
v L "sem" 1 720 "int8" `544 
f B "rtos_signal" 1 720 "void(int8 sem)" `543 
f N "rtos_msg_send" 1 721 ""
v L "task" 1 721 "int8" `546 
v L "msg" 1 721 "int8" `547 
f B "rtos_msg_send" 1 721 "void(int8 task,int8 msg)" `545 
f N "rtos_msg_read" 1 722 ""
f B "rtos_msg_read" 1 722 "int8()" `548 
f N "rtos_msg_poll" 1 723 ""
f B "rtos_msg_poll" 1 723 "int8()" `549 
f N "rtos_overrun" 1 724 ""
v L "task" 1 724 "int8" `551 
f B "rtos_overrun" 1 724 "int8(int8 task)" `550 
f N "rtos_stats" 1 725 ""
v L "task" 1 725 "int8" `553 
v L "stat" 1 725 "*int8" `554 
f B "rtos_stats" 1 725 "void(int8 task,*int8 stat)" `552  "#use timer() Prototypes:"
f N "get_ticks" 1 728 ""
f B "get_ticks" 1 728 "int8()" `555 
f N "get_ticks" 1 729 ""
f G "get_ticks" 1 729 "int16()" `556 
f N "get_ticks" 1 730 ""
f G "get_ticks" 1 730 "int32()" `557 
f N "get_ticks" 1 731 ""
v L "stream" 1 731 "int8" `559 
f G "get_ticks" 1 731 "int8(int8 stream)" `558 
f N "get_ticks" 1 732 ""
v L "stream" 1 732 "int8" `561 
f G "get_ticks" 1 732 "int16(int8 stream)" `560 
f N "get_ticks" 1 733 ""
v L "stream" 1 733 "int8" `563 
f G "get_ticks" 1 733 "int32(int8 stream)" `562 
f N "set_ticks" 1 734 ""
v L "value" 1 734 "int8" `565 
f B "set_ticks" 1 734 "void(int8 value)" `564 
f N "set_ticks" 1 735 ""
v L "value" 1 735 "int16" `567 
f G "set_ticks" 1 735 "void(int16 value)" `566 
f N "set_ticks" 1 736 ""
v L "value" 1 736 "int32" `569 
f G "set_ticks" 1 736 "void(int32 value)" `568 
f N "set_ticks" 1 737 ""
v L "stream" 1 737 "int8" `571 
v L "value" 1 737 "int8" `572 
f G "set_ticks" 1 737 "void(int8 stream,int8 value)" `570 
f N "set_ticks" 1 738 ""
v L "stream" 1 738 "int8" `571 
v L "value" 1 738 "int16" `575 
f G "set_ticks" 1 738 "void(int8 stream,int16 value)" `573 
f N "set_ticks" 1 739 ""
v L "stream" 1 739 "int8" `571 
v L "value" 1 739 "int32" `578 
f G "set_ticks" 1 739 "void(int8 stream,int32 value)" `576  "#use pwm() Prototypes:"
f N "pwm_on" 1 742 ""
f B "pwm_on" 1 742 "void()" `579 
f N "pwm_on" 1 743 ""
v L "stream" 1 743 "int8" `581 
f G "pwm_on" 1 743 "void(int8 stream)" `580 
f N "pwm_off" 1 744 ""
f B "pwm_off" 1 744 "void()" `582 
f N "pwm_off" 1 745 ""
v L "stream" 1 745 "int8" `584 
f G "pwm_off" 1 745 "void(int8 stream)" `583 
f N "pwm_set_duty" 1 746 ""
v L "duty" 1 746 "int16" `586 
f B "pwm_set_duty" 1 746 "void(int16 duty)" `585 
f N "pwm_set_duty" 1 747 ""
v L "stream" 1 747 "int8" `588 
v L "duty" 1 747 "int16" `589 
f G "pwm_set_duty" 1 747 "void(int8 stream,int16 duty)" `587 
f N "pwm_set_duty_percent" 1 748 ""
v L "percent" 1 748 "int16" `591 
f B "pwm_set_duty_percent" 1 748 "void(int16 percent)" `590 
f N "pwm_set_duty_percent" 1 749 ""
v L "stream" 1 749 "int8" `593 
v L "percent" 1 749 "int16" `594 
f G "pwm_set_duty_percent" 1 749 "void(int8 stream,int16 percent)" `592 
f N "pwm_set_frequency" 1 750 ""
v L "frequency" 1 750 "int32" `596 
f B "pwm_set_frequency" 1 750 "void(int32 frequency)" `595 
f N "pwm_set_frequency" 1 751 ""
v L "stream" 1 751 "int8" `598 
v L "frequency" 1 751 "int32" `599 
f G "pwm_set_frequency" 1 751 "void(int8 stream,int32 frequency)" `597  "#use capture() Prototypes:"
f N "get_capture_time" 1 754 ""
f B "get_capture_time" 1 754 "int16()" `600 
f N "get_capture_time" 1 755 ""
v L "stream" 1 755 "int8" `602 
f G "get_capture_time" 1 755 "int16(int8 stream)" `601 
f N "get_capture_event" 1 756 ""
f B "get_capture_event" 1 756 "int8()" `603 
f N "get_capture_event" 1 757 ""
v L "stream" 1 757 "int8" `605 
f G "get_capture_event" 1 757 "int8(int8 stream)" `604  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 770 ""
v L "address" 1 770 "int16" `607 
f B "goto_address" 1 770 "void(int16 address)" `606 
f N "label_address" 1 771 ""
v L "label" 1 771 "int16" `609 
f B "label_address" 1 771 "int16(int16 label)" `608  "Program Memory Prototypes:"
f N "read_program_memory" 1 774 ""
v L "address" 1 774 "int16" `611 
v L "dataptr" 1 774 "*int8" `612 
v L "count" 1 774 "int16" `613 
f B "read_program_memory" 1 774 "void(int16 address,*int8 dataptr,int16 count)" `610 
f N "read_program_eeprom" 1 775 ""
v L "address" 1 775 "int16" `615 
f B "read_program_eeprom" 1 775 "int16(int16 address)" `614 
f N "erase_program_eeprom" 1 776 ""
v L "address" 1 776 "int16" `617 
f B "erase_program_eeprom" 1 776 "void(int16 address)" `616 
f N "write_program_memory" 1 777 ""
v L "address" 1 777 "int16" `619 
v L "dataptr" 1 777 "*int8" `620 
v L "count" 1 777 "int16" `621 
f B "write_program_memory" 1 777 "void(int16 address,*int8 dataptr,int16 count)" `618 
f N "write_program_eeprom" 1 778 ""
v L "address" 1 778 "int16" `623 
v L "data" 1 778 "int16" `624 
f B "write_program_eeprom" 1 778 "void(int16 address,int16 data)" `622  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 783 "int16" `625 
f N "read_eeprom" 1 788 ""
v L "address" 1 788 "__EEADDRESS__" `627 
f B "read_eeprom" 1 788 "int8(__EEADDRESS__ address)" `626 
f N "write_eeprom" 1 789 ""
v L "address" 1 789 "__EEADDRESS__" `629 
v L "value" 1 789 "int8" `630 
f B "write_eeprom" 1 789 "void(__EEADDRESS__ address,int8 value)" `628  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 796 ""
v L "interrupt" 1 796 "int32" `632 
f B "enable_interrupts" 1 796 "void(int32 interrupt)" `631 
f N "disable_interrupts" 1 797 ""
v L "interrupt" 1 797 "int32" `634 
f B "disable_interrupts" 1 797 "void(int32 interrupt)" `633 
f N "clear_interrupt" 1 798 ""
v L "interrupt" 1 798 "int32" `636 
f B "clear_interrupt" 1 798 "void(int32 interrupt)" `635 
f N "interrupt_active" 1 799 ""
v L "interrupt" 1 799 "int32" `638 
f B "interrupt_active" 1 799 "int8(int32 interrupt)" `637 
f N "interrupt_enabled" 1 800 ""
v L "interrupt" 1 800 "int32" `640 
f B "interrupt_enabled" 1 800 "int8(int32 interrupt)" `639 
f N "ext_int_edge" 1 801 ""
v L "source" 1 801 "int8" `642 
v L "edge" 1 801 "int8" `643 
f B "ext_int_edge" 1 801 "void(int8 source,int8 edge)" `641 
f N "jump_to_isr" 1 802 ""
v L "address" 1 802 "int16" `645 
f B "jump_to_isr" 1 802 "void(int16 address)" `644  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 804 "0x40"
d G "H_TO_L" 1 805 "0"
d G "GLOBAL" 1 807 "0xF2C0"
d G "PERIPH" 1 808 "0xF240"
d G "INT_RTCC" 1 809 "0x00F220"
d G "INT_TIMER0" 1 810 "0x00F220"
d G "INT_TIMER1" 1 811 "0x009D01"
d G "INT_TIMER2" 1 812 "0x009D02"
d G "INT_TIMER3" 1 813 "0x00A002"
d G "INT_EXT_L2H" 1 814 "0x5000F210"
d G "INT_EXT_H2L" 1 815 "0x6000F210"
d G "INT_EXT" 1 816 "0x00F210"
d G "INT_EXT1_L2H" 1 817 "0x5001F008"
d G "INT_EXT1_H2L" 1 818 "0x6001F008"
d G "INT_EXT1" 1 819 "0x00F008"
d G "INT_EXT2_L2H" 1 820 "0x5002F010"
d G "INT_EXT2_H2L" 1 821 "0x6002F010"
d G "INT_EXT2" 1 822 "0x00F010"
d G "INT_RB" 1 823 "0x00FFF208"
d G "INT_AD" 1 824 "0x009D40"
d G "INT_RDA" 1 825 "0x009D20"
d G "INT_TBE" 1 826 "0x009D10"
d G "INT_SSP" 1 827 "0x009D08"
d G "INT_CCP1" 1 828 "0x009D04"
d G "INT_CCP2" 1 829 "0x00A001"
d G "INT_BUSCOL" 1 830 "0x00A008"
d G "INT_LOWVOLT" 1 831 "0x00A004"
d G "INT_COMP" 1 832 "0x00A040"
d G "INT_EEPROM" 1 833 "0x00A010"
d G "INT_OSCF" 1 834 "0x00A080"
d G "INT_SPP" 1 835 "0x009D80"
d G "INT_USB" 1 836 "0x00A020"
D G "_STDIO" 2 12 ""
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_isr" 3 19 10 "FUNCTION"
F N "memmove" 3 34 ""
V L "s1" 3 34 "*int8" `655 
V L "s2" 3 34 "*int8" `656 
V L "n" 3 34 "int16" `657 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `654 
V L "sc1" 3 36 "*int8" `658 
V L "sc2" 3 37 "*int8" `659 
D G "strcopy" 3 54 "strcpy"
F N "strncpy" 3 61 ""
V L "s1" 3 61 "*int8" `661 
V L "s2" 3 61 "*int8" `662 
V L "n" 3 61 "int16" `663 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `660 
V L "s" 3 63 "*int8" `664 
F N "strcat" 3 78 ""
V L "s1" 3 78 "*int8" `666 
V L "s2" 3 78 "*int8" `667 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `665 
V L "s" 3 80 "*int8" `668 
F N "strncat" 3 96 ""
V L "s1" 3 96 "*int8" `670 
V L "s2" 3 96 "*int8" `671 
V L "n" 3 96 "int16" `672 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `669 
V L "s" 3 98 "*int8" `673 
C L "memcmp" 3 19 3 "FUNCTION"
F N "memcmp" 3 120 ""
V L "s1" 3 120 "*int8" `675 
V L "s2" 3 120 "*int8" `676 
V L "n" 3 120 "int16" `677 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `674 
V L "su1" 3 122 "*int8" `678 
V L "su2" 3 122 "*int8" `679 
C L "strcmp" 3 19 2 "FUNCTION"
F N "strcmp" 3 134 ""
V L "s1" 3 134 "*int8" `681 
V L "s2" 3 134 "*int8" `682 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `680 
C L "strcoll" 3 19 2 "FUNCTION"
F N "strcoll" 3 144 ""
V L "s1" 3 144 "*int8" `684 
V L "s2" 3 144 "*int8" `685 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `683 
C L "strncmp" 3 19 4 "FUNCTION"
F N "strncmp" 3 157 ""
V L "s1" 3 157 "*int8" `687 
V L "s2" 3 157 "*int8" `688 
V L "n" 3 157 "int16" `689 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `686 
C L "strxfrm" 3 19 4 "FUNCTION"
F N "strxfrm" 3 170 ""
V L "s1" 3 170 "*int8" `691 
V L "s2" 3 170 "*int8" `692 
V L "n" 3 170 "int16" `693 
F G "strxfrm" 3 171 "int16(*int8 s1,*int8 s2,int16 n)" `690 
V L "c" 3 172 "int8" `694 
V L "n1" 3 173 "int8" `695 
C L "strxfrm" 3 19 1 "FUNCTION"
F N "memchr" 3 201 ""
V L "s" 3 201 "*int8" `697 
V L "c" 3 201 "int8" `698 
V L "n" 3 201 "int16" `699 
F G "memchr" 3 202 "*int8(*int8 s,int8 c,int16 n)" `696 
V L "uc" 3 203 "int8" `700 
V L "su" 3 204 "*int8" `701 
F N "strchr" 3 215 ""
V L "s" 3 215 "*int8" `703 
V L "c" 3 215 "int8" `704 
F G "strchr" 3 216 "*int8(*int8 s,int8 c)" `702 
C L "strcspn" 3 19 4 "FUNCTION"
F N "strcspn" 3 227 ""
V L "s1" 3 227 "*int8" `706 
V L "s2" 3 227 "*int8" `707 
F G "strcspn" 3 228 "int8(*int8 s1,*int8 s2)" `705 
V L "sc1" 3 229 "*int8" `708 
V L "sc2" 3 229 "*int8" `709 
F N "strpbrk" 3 242 ""
V L "s1" 3 242 "*int8" `711 
V L "s2" 3 242 "*int8" `712 
F G "strpbrk" 3 243 "*int8(*int8 s1,*int8 s2)" `710 
V L "sc1" 3 244 "*int8" `713 
V L "sc2" 3 244 "*int8" `714 
F N "strrchr" 3 257 ""
V L "s" 3 257 "*int8" `716 
V L "c" 3 257 "int8" `717 
F G "strrchr" 3 258 "*int8(*int8 s,int8 c)" `715 
V L "p" 3 259 "*int8" `718 
C L "strspn" 3 19 2 "FUNCTION"
F N "strspn" 3 272 ""
V L "s1" 3 272 "*int8" `720 
V L "s2" 3 272 "*int8" `721 
F G "strspn" 3 273 "int8(*int8 s1,*int8 s2)" `719 
V L "sc1" 3 274 "*int8" `722 
V L "sc2" 3 274 "*int8" `723 
F N "strstr" 3 291 ""
V L "s1" 3 291 "*int8" `725 
V L "s2" 3 291 "*int8" `726 
F G "strstr" 3 292 "*int8(*int8 s1,*int8 s2)" `724 
V L "s" 3 293 "*int8" `727 
V L "t" 3 293 "*int8" `728 
C L "strlen" 3 19 2 "FUNCTION"
F N "strlen" 3 318 ""
V L "s" 3 318 "*int8" `730 
F G "strlen" 3 319 "int16(*int8 s)" `729 
V L "sc" 3 320 "*int8" `731 
F N "strtok" 3 341 ""
V L "s1" 3 341 "*int8" `733 
V L "s2" 3 341 "*int8" `734 
F G "strtok" 3 342 "*int8(*int8 s1,*int8 s2)" `732 
V L "beg" 3 343 "*int8" `735 
V L "end" 3 343 "*int8" `736 
V L "save" 3 344 "*int8" `737 
C L "stricmp" 3 19 6 "FUNCTION"
F N "stricmp" 3 392 ""
V L "s1" 3 392 "*int8" `739 
V L "s2" 3 392 "*int8" `740 
F G "stricmp" 3 393 "sint8(*int8 s1,*int8 s2)" `738 
F N "strlwr" 3 406 ""
V L "s" 3 406 "*int8" `744 
F G "strlwr" 3 407 "*int8(*int8 s)" `743 
V L "p" 3 408 "*int8" `745 
F N "strupr" 3 420 ""
V L "s" 3 420 "*int8" `747 
F G "strupr" 3 421 "*int8(*int8 s)" `746 
V L "p" 3 422 "*int8" `748 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `752 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `756  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
F N "atoi" 6 50 ""
V L "s" 6 50 "*int8" `758 
f G "atoi" 6 50 "sint8(*int8 s)" `757  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 6 58 ""
V L "s" 6 58 "*int8" `760 
f G "atoi32" 6 58 "sint32(*int8 s)" `759  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
F N "itoa" 6 79 ""
V L "num" 6 79 "sint32" `762 
V L "base" 6 79 "int8" `763 
V L "s" 6 79 "*int8" `764 
f G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `761  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
F N "atol" 6 85 ""
V L "s" 6 85 "*int8" `766 
f G "atol" 6 85 "sint16(*int8 s)" `765  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
F N "strtol" 6 93 ""
V L "s" 6 93 "*int8" `768 
V L "endptr" 6 93 "*int8" `769 
V L "base" 6 93 "sint8" `770 
f G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `767  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
F N "strtoul" 6 101 ""
V L "s" 6 101 "*int8" `772 
V L "endptr" 6 101 "*int8" `773 
V L "base" 6 101 "sint8" `774 
f G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `771  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
F N "strtof" 6 110 ""
V L "s" 6 110 "*int8" `776 
V L "endptr" 6 110 "*int8" `777 
f G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `775  "provided for compatibility"
D G "strtof48" 6 116 "(s,e) strtof(s, e)"
D G "strtod" 6 117 "(s,e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
F N "atoe" 6 149 ""
V L "s" 6 149 "*int8" `779 
f G "atoe" 6 149 "float(*int8 s)" `778  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
F N "rand" 6 169 ""
f G "rand" 6 169 "int16()" `780  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
F N "srand" 6 191 ""
V L "seed" 6 191 "int32" `782 
f G "srand" 6 191 "void(int32 seed)" `781  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
F N "system" 6 205 ""
V L "string" 6 205 "*int8" `784 
f G "system" 6 205 "sint8(*int8 string)" `783  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
F N "div" 6 251 ""
V L "numer" 6 251 "sint8" `786 
V L "denom" 6 251 "sint8" `787 
f G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `785 
F N "ldiv" 6 252 ""
V L "numer" 6 252 "sint16" `789 
V L "denom" 6 252 "sint16" `790 
f G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `788  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
F N "div" 6 274 ""
V L "numer" 6 274 "sint8" `786 
V L "denom" 6 274 "sint8" `793 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `785 
V L "val" 6 276 "div_t" `791 
F N "ldiv" 6 282 ""
V L "numer" 6 282 "sint16" `789 
V L "denom" 6 282 "sint16" `800 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `788 
V L "val" 6 284 "ldiv_t" `798 
F N "atoe" 6 361 ""
V L "s" 6 361 "*int8" `806 
F G "atoe" 6 362 "float(*int8 s)" `778 
V L "pow10" 6 363 "float" `805 
V L "result" 6 364 "float" `806 
V L "sign" 6 365 "int8" `807 
V L "expsign" 6 366 "int8" `808 
V L "c" 6 367 "int8" `809 
V L "ptr" 6 368 "int8" `810 
V L "i" 6 369 "int8" `811 
V L "exp" 6 370 "float" `812 
V L "expcnt" 6 371 "int8" `813 
C L "atoe" 6 397 1 "FUNCTION"
F N "atoi" 6 429 ""
V L "s" 6 429 "*int8" `826 
F G "atoi" 6 430 "sint8(*int8 s)" `757 
V L "result" 6 431 "sint8" `825 
V L "sign" 6 432 "int8" `826 
V L "base" 6 432 "int8" `827 
V L "index" 6 432 "int8" `828 
V L "c" 6 433 "int8" `829 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
F N "atol" 6 498 ""
V L "s" 6 498 "*int8" `831 
F G "atol" 6 499 "sint16(*int8 s)" `765 
V L "result" 6 500 "sint16" `830 
V L "sign" 6 501 "int8" `831 
V L "base" 6 501 "int8" `832 
V L "index" 6 501 "int8" `833 
V L "c" 6 502 "int8" `834 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
F N "mult_with10" 6 565 ""
V L "num" 6 565 "int32" `836 
F G "mult_with10" 6 566 "sint32(int32 num)" `835 
F N "atoi32" 6 571 ""
V L "s" 6 571 "*int8" `838 
F G "atoi32" 6 572 "sint32(*int8 s)" `759 
V L "result" 6 573 "sint32" `837 
V L "sign" 6 574 "int8" `838 
V L "base" 6 574 "int8" `839 
V L "index" 6 574 "int8" `840 
V L "c" 6 575 "int8" `841 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
F N "itoa" 6 770 ""
V L "num" 6 770 "sint32" `762 
V L "base" 6 770 "int8" `763 
V L "s" 6 770 "*int8" `845 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `761 
V L "temp" 6 772 "int32" `842 
V L "i" 6 773 "int8" `843 
V L "sign" 6 773 "int8" `844 
V L "cnt" 6 773 "int8" `845 
V L "c" 6 774 "int8" `846 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
F N "strtof" 6 885 ""
V L "s" 6 885 "*int8" `776 
V L "endptr" 6 885 "*int8" `855 
F G "strtof" 6 886 "float(*int8 s,*int8 endptr)" `775 
V L "pow10" 6 887 "float" `853 
V L "result" 6 888 "float" `854 
V L "skip" 6 889 "int1" `855 
V L "sign" 6 889 "int1" `856 
V L "point" 6 889 "int1" `857 
V L "c" 6 890 "int8" `858 
V L "ptr" 6 891 "int8" `859 
F N "strtoul" 6 1103 ""
V L "s" 6 1103 "*int8" `772 
V L "endptr" 6 1103 "*int8" `773 
V L "base" 6 1103 "sint8" `864 
F G "strtoul" 6 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `771 
V L "sc" 6 1105 "*int8" `861 
V L "s1" 6 1105 "*int8" `862 
V L "sd" 6 1105 "*int8" `863 
V L "x" 6 1106 "int16" `864 
V L "sign" 6 1107 "int8" `865 
V L "digits" 6 1108 "int8[1]" `866 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
F N "strtol" 6 1165 ""
V L "s" 6 1165 "*int8" `768 
V L "endptr" 6 1165 "*int8" `769 
V L "base" 6 1165 "sint8" `871 
F G "strtol" 6 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `767 
V L "sc" 6 1167 "*int8" `868 
V L "s1" 6 1167 "*int8" `869 
V L "sd" 6 1167 "*int8" `870 
V L "x" 6 1168 "sint16" `871 
V L "sign" 6 1169 "int8" `872 
V L "digits" 6 1170 "int8[1]" `873 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
F N "system" 6 1228 ""
V L "string" 6 1228 "*int8" `876 
F G "system" 6 1229 "sint8(*int8 string)" `783 
F N "mblen" 6 1233 ""
V L "s" 6 1233 "*int8" `876 
V L "n" 6 1233 "int16" `877 
F G "mblen" 6 1234 "int16(*int8 s,int16 n)" `875 
F N "mbtowc" 6 1238 ""
V L "pwc" 6 1238 "*int8" `879 
V L "s" 6 1238 "*int8" `880 
V L "n" 6 1238 "int16" `881 
F G "mbtowc" 6 1239 "int8(*int8 pwc,*int8 s,int16 n)" `878 
F N "wctomb" 6 1244 ""
V L "s" 6 1244 "*int8" `883 
V L "wchar" 6 1244 "int8" `884 
F G "wctomb" 6 1245 "int8(*int8 s,int8 wchar)" `882 
F N "mbstowcs" 6 1250 ""
V L "pwcs" 6 1250 "*int8" `886 
V L "s" 6 1250 "*int8" `887 
V L "n" 6 1250 "int16" `888 
F G "mbstowcs" 6 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `885 
F N "wcstombs" 6 1256 ""
V L "s" 6 1256 "*int8" `890 
V L "pwcs" 6 1256 "*int8" `891 
V L "n" 6 1256 "int16" `892 
F G "wcstombs" 6 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `889 
V G "_Randseed" 6 1266 "int32" `893 
F N "rand" 6 1268 ""
F G "rand" 6 1269 "int16()" `780 
F N "srand" 6 1274 ""
V L "seed" 6 1274 "int32" `898 
F G "srand" 6 1275 "void(int32 seed)" `781 
F N "*_Cmpfun" 6 1284 ""
V L "p1" 6 1284 "*int8" `898 
V L "p2" 6 1284 "*int8" `899 
T G "*_Cmpfun" 6 1284 "sint8(*int8 p1,*int8 p2)" `897 
F N "qsort" 6 1291 ""
V L "qdata" 6 1291 "*int8" `902 
V L "qitems" 6 1291 "int8" `903 
V L "qsize" 6 1291 "int8" `904 
V L "cmp" 6 1291 "_Cmpfun" `905 
F G "qsort" 6 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `901 
V L "m" 6 1292 "int8" `906 
V L "j" 6 1292 "int8" `907 
V L "i" 6 1292 "int8" `908 
V L "l" 6 1292 "int8" `909 
V L "done" 6 1293 "int1" `910 
V L "t" 6 1294 "int8[16]" `911 
F N "bsearch" 6 1319 ""
V L "key" 6 1319 "*int8" `914 
V L "base" 6 1319 "*int8" `915 
V L "num" 6 1319 "int16" `916 
V L "width" 6 1319 "int16" `917 
V L "cmp" 6 1319 "_Cmpfun" `918 
F G "bsearch" 6 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `913 
V L "p" 6 1321 "*int8" `919 
V L "q" 6 1321 "*int8" `920 
V L "n" 6 1322 "int16" `921 
V L "pivot" 6 1323 "int16" `922 
V L "val" 6 1324 "sint8" `923 
C L "bsearch" 6 397 1 "FUNCTION"
D G "LCD_ADDR" 7 86 "0x4E" "I2C slave address for LCD module"
D G "ON" 7 88 "1"
D G "OFF" 7 89 "0"
D G "RS" 7 90 "0b00000001" "P0 - PCF8574T Pin connected to RS"
D G "RW" 7 91 "0b00000010" "P1 - PCF8574T Pin connected to RW"
D G "EN" 7 92 "0b00000100" "P2 - PCF8574T Pin connected to EN"
D G "BACKLIGHT_LED" 7 93 "0b00001000" "P3 - PCF8574T Pin connected to BACKLIGHT LED"
D G "lcd_line_one" 7 95 "0x80" "LCD RAM address for line 1"
D G "lcd_line_two" 7 96 "0xC0" "LCD RAM address for line 2"
D G "lcd_line_three" 7 97 "0x94" "LCD RAM address for line 3"
D G "lcd_line_four" 7 98 "0xD4" "LCD RAM address for line 4"
V G "address" 7 100 "int8" `927 
V G "lcd_backlight" 7 101 "int1" `928 
F N "i2c_lcd_backlight_On" 7 103 ""
F G "i2c_lcd_backlight_On" 7 103 "void()" `929 
F N "i2c_lcd_backlight_Off" 7 107 ""
F G "i2c_lcd_backlight_Off" 7 107 "void()" `930 
F N "i2c_send_nibble" 7 111 ""
V L "data" 7 111 "int8" `932 
F G "i2c_send_nibble" 7 112 "void(int8 data)" `931 
C L "i2c_send_nibble" 7 2 1 "FUNCTION"
F N "lcd_send_byte" 7 123 ""
V L "data" 7 123 "int8" `934 
F G "lcd_send_byte" 7 124 "void(int8 data)" `933 
C L "lcd_send_byte" 7 2 1 "FUNCTION"
C L "lcd_send_byte" 7 2 1 "FUNCTION"
F N "lcd_clear" 7 131 ""
F G "lcd_clear" 7 132 "void()" `935 
F N "lcd_init" 7 138 ""
F G "lcd_init" 7 139 "void()" `936 
C L "lcd_init" 7 2 2 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
C L "lcd_init" 7 2 1 "FUNCTION"
F N "lcd_gotoxy" 7 167 ""
V L "x" 7 167 "int8" `938 
V L "y" 7 167 "int8" `939 
F G "lcd_gotoxy" 7 168 "void(int8 x,int8 y)" `937 
V L "data" 7 169 "int8" `940 
C L "LCD_PUTC" 7 2 1 "FUNCTION"
F N "LCD_PUTC" 7 189 ""
V L "in_data" 7 189 "int8" `942 
F G "LCD_PUTC" 7 190 "void(int8 in_data)" `941 
V L "data" 7 191 "int8" `943 
C L "LCD_PUTC" 7 2 1 "FUNCTION"
C L "LCD_PUTC" 7 2 1 "FUNCTION"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
D G "MAX192_H" 8 9 ""
D G "ADC_CS1" 8 11 "PIN_A1"
D G "ADC_SCLK" 8 12 "PIN_A2"
D G "ADC_DOUT" 8 13 "PIN_A3"
F N "leer_ADC" 8 15 ""
V L "ADC" 8 15 "int8" `945 
F G "leer_ADC" 8 15 "int16(int8 ADC)" `944 
V L "dato" 8 16 "int16" `946 
V L "i" 8 17 "int8" `947 
C L "leer_ADC" 8 1 1 "FUNCTION"
D G "MATH_H" 9 30 ""
D G "PI" 9 35 "3.1415926535897932"
D G "SQRT2" 9 38 "1.4142135623730950"
C L "CEIL_FLOOR" 9 2 3 "FUNCTION"
F N "CEIL_FLOOR" 9 45 ""
V L "x" 9 45 "float" `949 
V L "n" 9 45 "int8" `950 
F G "CEIL_FLOOR" 9 46 "float(float x,int8 n)" `948 
V L "y" 9 47 "float" `951 
V L "res" 9 47 "float" `952 
V L "l" 9 48 "int16" `953 
V L "s" 9 49 "int1" `954 
C L "floor" 9 2 5 "FUNCTION"
F N "floor" 9 207 ""
V L "x" 9 207 "float" `961 
F G "floor" 9 208 "float(float x)" `960 
C L "ceil" 9 2 5 "FUNCTION"
F N "ceil" 9 233 ""
V L "x" 9 233 "float" `963 
F G "ceil" 9 234 "float(float x)" `962 
D G "fabs" 9 259 "abs"
C L "fmod" 9 2 6 "FUNCTION"
F N "fmod" 9 271 ""
V L "x" 9 271 "float" `965 
V L "y" 9 271 "float" `966 
F G "fmod" 9 272 "float(float x,float y)" `964 
V L "i" 9 273 "float" `967 
D G "LN2" 9 334 "0.6931471805599453"
D G "LN2_INV" 9 335 "1.4426950408889634073"
V G "pe" 9 337 "[6]" `969 
F N "exp" 9 341 ""
V L "x" 9 341 "float" `972 
F G "exp" 9 342 "float(float x)" `971 
V L "y" 9 343 "float" `973 
V L "res" 9 343 "float" `974 
V L "r" 9 343 "float" `975 
V L "n" 9 347 "sint8" `976 
V L "s" 9 348 "int1" `977 
C L "exp" 9 2 1 "FUNCTION"
V G "pl" 9 525 "[4]" `981 
V G "ql" 9 526 "[4]" `984 
C L "log" 9 2 3 "FUNCTION"
F N "log" 9 534 ""
V L "x" 9 534 "float" `987 
F G "log" 9 535 "float(float x)" `986 
V L "y" 9 536 "float" `988 
V L "res" 9 536 "float" `989 
V L "r" 9 536 "float" `990 
V L "y2" 9 536 "float" `991 
V L "n" 9 540 "sint8" `992 
C L "log" 9 2 1 "FUNCTION"
D G "LN10" 9 758 "2.3025850929940456"
D G "LN10_INV" 9 759 "0.4342944819032518276"
C L "log10" 9 2 3 "FUNCTION"
F N "log10" 9 767 ""
V L "x" 9 767 "float" `994 
F G "log10" 9 768 "float(float x)" `993 
V L "r" 9 769 "float" `995 
C L "modf" 9 2 8 "FUNCTION"
F N "modf" 9 808 ""
V L "value" 9 808 "float" `997 
V L "iptr" 9 808 "*float" `998 
F G "modf" 9 809 "float(float value,*float iptr)" `996 
C L "pwr" 9 2 6 "FUNCTION"
F N "pwr" 9 836 ""
V L "x" 9 836 "float" `1000 
V L "y" 9 836 "float" `1001 
F G "pwr" 9 837 "float(float x,float y)" `999 
C L "pow" 9 2 7 "FUNCTION"
F N "pow" 9 899 ""
V L "x" 9 899 "float" `1003 
V L "y" 9 899 "float" `1004 
F G "pow" 9 900 "float(float x,float y)" `1002 
C L "sqrt" 9 2 5 "FUNCTION"
F N "sqrt" 9 960 ""
V L "x" 9 960 "float" `1006 
F G "sqrt" 9 961 "float(float x)" `1005 
V L "y" 9 962 "float" `1007 
V L "res" 9 962 "float" `1008 
V L "p" 9 966 "*int8" `1009 
D G "PI_DIV_BY_TWO_INV" 9 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 9 1159 "1.5707963267948966"
D G "TWOBYPI" 9 1163 "0.6366197723675813"
C L "cos" 9 2 3 "FUNCTION"
F N "cos" 9 1171 ""
V L "x" 9 1171 "float" `1011 
F G "cos" 9 1172 "float(float x)" `1010 
V L "y" 9 1173 "float" `1012 
V L "t" 9 1173 "float" `1013 
V L "t2" 9 1173 "float" `1014 
V L "quad" 9 1174 "int8" `1015 
V L "i" 9 1174 "int8" `1016 
V L "frac" 9 1175 "float" `1017 
V L "p" 9 1176 "float[5]" `1018  "by the series definition for cosine"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 2 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "sin" 9 2 5 "FUNCTION"
F N "sin" 9 1310 ""
V L "x" 9 1310 "float" `1020 
F G "sin" 9 1311 "float(float x)" `1019 
C L "tan" 9 2 5 "FUNCTION"
F N "tan" 9 1336 ""
V L "x" 9 1336 "float" `1022 
F G "tan" 9 1337 "float(float x)" `1021 
V L "c" 9 1338 "float" `1023 
V L "s" 9 1338 "float" `1024 
V G "pas" 9 1376 "[3]" `1026 
V G "qas" 9 1377 "[3]" `1029 
F N "ASIN_COS" 9 1379 ""
V L "x" 9 1379 "float" `1032 
V L "n" 9 1379 "int8" `1033 
F G "ASIN_COS" 9 1380 "float(float x,int8 n)" `1031 
V L "y" 9 1381 "float" `1034 
V L "res" 9 1381 "float" `1035 
V L "r" 9 1381 "float" `1036 
V L "y2" 9 1381 "float" `1037 
V L "s" 9 1382 "int1" `1038 
C L "ASIN_COS" 9 2 1 "FUNCTION"
C L "ASIN_COS" 9 2 1 "FUNCTION"
C L "asin" 9 2 5 "FUNCTION"
F N "asin" 9 1537 ""
V L "x" 9 1537 "float" `1040 
F G "asin" 9 1538 "float(float x)" `1039 
V L "r" 9 1539 "float" `1041 
C L "acos" 9 2 5 "FUNCTION"
F N "acos" 9 1571 ""
V L "x" 9 1571 "float" `1043 
F G "acos" 9 1572 "float(float x)" `1042 
V L "r" 9 1573 "float" `1044 
V G "pat" 9 1599 "[4]" `1046 
V G "qat" 9 1600 "[4]" `1049 
C L "atan" 9 2 3 "FUNCTION"
F N "atan" 9 1608 ""
V L "x" 9 1608 "float" `1052 
F G "atan" 9 1609 "float(float x)" `1051 
V L "y" 9 1610 "float" `1053 
V L "res" 9 1610 "float" `1054 
V L "r" 9 1610 "float" `1055 
V L "s" 9 1611 "int1" `1056 
V L "flag" 9 1611 "int1" `1057 
C L "atan" 9 2 1 "FUNCTION"
C L "atan2" 9 2 7 "FUNCTION"
F N "atan2" 9 1751 ""
V L "y" 9 1751 "float" `1059 
V L "x" 9 1751 "float" `1060 
F G "atan2" 9 1752 "float(float y,float x)" `1058 
V L "z" 9 1753 "float" `1061 
V L "sign" 9 1754 "int1" `1062 
V L "quad" 9 1755 "int8" `1063 
C L "atan2" 9 2 1 "FUNCTION"
C L "atan2" 9 2 1 "FUNCTION"
C L "cosh" 9 2 7 "FUNCTION"
F N "cosh" 9 1973 ""
V L "x" 9 1973 "float" `1066 
F G "cosh" 9 1974 "float(float x)" `1065 
C L "sinh" 9 2 6 "FUNCTION"
F N "sinh" 9 2000 ""
V L "x" 9 2000 "float" `1068 
F G "sinh" 9 2001 "float(float x)" `1067 
C L "tanh" 9 2 6 "FUNCTION"
F N "tanh" 9 2030 ""
V L "x" 9 2030 "float" `1070 
F G "tanh" 9 2031 "float(float x)" `1069 
D G "LOG2" 9 2060 ".30102999566398119521"
D G "LOG2_INV" 9 2061 "3.32192809488736234787"
F N "frexp" 9 2062 ""
V L "x" 9 2062 "float" `1072 
V L "exp" 9 2062 "*sint8" `1073 
F G "frexp" 9 2063 "float(float x,*sint8 exp)" `1071 
V L "res" 9 2064 "float" `1074 
V L "sign" 9 2065 "int1" `1075 
C L "ldexp" 9 2 6 "FUNCTION"
F N "ldexp" 9 2207 ""
V L "value" 9 2207 "float" `1077 
V L "exp" 9 2207 "sint8" `1078 
F G "ldexp" 9 2208 "float(float value,sint8 exp)" `1076 
V G "punto1" 0 20 "int16" `1079 
V G "tension" 0 21 "float" `1080 
V G "tension_RMS" 0 21 "float" `1081 
V G "pulso_timer" 0 22 "int8" `1082 
V G "contador" 0 22 "int8" `1083 
F N "interrtimer_0" 0 26 ""
F G "interrtimer_0" 0 26 "void()" `1084 
C L "interrtimer_0" 0 16 1 "FUNCTION"
F N "MAIN" 0 31 ""
F G "MAIN" 0 31 "void()" `1085  "lcd_init();"
C L "MAIN" 0 16 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
